name: 'Push on DEV environment'

on:
  push:
    branches:
    - main
    paths:
    - 'prd/**'

env:
  TF_LOG: INFO
  TF_INPUT: false

permissions:
    id-token: write
    contents: read
    pull-requests: read
    checks: read

jobs:
  terraform:
    name: 'Terraform Push'
    runs-on: ubuntu-latest
    environment: 
      name: prd

    # Use the Bash shell
    defaults:
      run:
        shell: bash
        working-directory: ./prd

    steps:
    # Determine whether this push came from an approved PR
    - name: Determine deployment eligibility
      id: pr-gate
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        result-encoding: string
        script: |
          const commitSha = context.payload.after;
          const owner = context.repo.owner;
          const repo = context.repo.repo;

          async function result(payload) {
            return JSON.stringify(payload);
          }

          const { data: prs } = await github.rest.repos.listPullRequestsAssociatedWithCommit({
            owner,
            repo,
            commit_sha: commitSha,
          });

          if (!prs.length) {
            core.notice(`No pull request found for commit ${commitSha}. Skipping deployment.`);
            return result({ proceed: false, reason: 'no_pr' });
          }

          const pr = prs.find(p => p.base?.ref === 'main') ?? prs[0];

          if (!pr.merged_at) {
            core.notice(`Pull request #${pr.number} is not merged. Skipping deployment.`);
            return result({ proceed: false, reason: 'not_merged', pr: pr.number });
          }

          const { data: reviews } = await github.rest.pulls.listReviews({
            owner,
            repo,
            pull_number: pr.number,
          });

          const approved = reviews.some(review => review.state === 'APPROVED');

          if (!approved) {
            core.notice(`Pull request #${pr.number} has no approving reviews. Skipping deployment.`);
            return result({ proceed: false, reason: 'not_approved', pr: pr.number });
          }

          const candidateRefs = Array.from(
            new Set(
              [pr.head?.sha, pr.merge_commit_sha, commitSha].filter(Boolean)
            )
          );

          let devCheck = null;

          for (const ref of candidateRefs) {
          const { data: checkRuns } = await github.rest.checks.listForRef({
            owner,
            repo,
            ref,
          });

            devCheck = checkRuns.check_runs?.find(
              run => run.name === 'pr-infra-check' && run.conclusion === 'success'
            );

            if (devCheck) {
              core.info(`Found successful 'pr-infra-check' on ${ref}.`);
              break;
            }
          }
          if (!devCheck) {
            core.notice(`Required workflow 'pr-infra-check' did not complete successfully for commit ${commitSha}. Skipping deployment.`);
            return result({ proceed: false, reason: 'check_failed', pr: pr.number });
          }

          core.notice(`Deploying commit ${commitSha} from approved PR #${pr.number}.`);
          return result({ proceed: true, pr: pr.number });

    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      if: ${{ fromJson(steps.pr-gate.outputs.result).proceed }}
      uses: actions/checkout@v3

    # Install the preferred version of Terraform CLI 
    - name: Setup Terraform
      if: ${{ fromJson(steps.pr-gate.outputs.result).proceed }}
      uses: hashicorp/setup-terraform@v2

    # Log into Azure with OIDC integration if branch is main
    - name: 'Az CLI login for Main branch' 
      if: ${{ fromJson(steps.pr-gate.outputs.result).proceed && github.ref == 'refs/heads/main' }}
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    # Run Terraform init for Main branch
    - name: Terraform Init for Main branch
      id: init-main
      if: ${{ fromJson(steps.pr-gate.outputs.result).proceed && github.ref == 'refs/heads/main' }}
      env:
        TF_STORAGE_ACCOUNT: ${{ secrets.TF_STORAGE_ACCOUNT }}
        TF_CONTAINER_NAME: ${{ secrets.TF_CONTAINER_NAME }}
        TF_RESOURCE_GROUP_NAME: ${{ secrets.TF_RESOURCE_GROUP_NAME }}
        TF_SUBSCRIPTION_ID: ${{ secrets.TF_SUBSCRIPTION_ID }}
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      run: terraform init -backend-config="storage_account_name=$TF_STORAGE_ACCOUNT" -backend-config="container_name=$TF_CONTAINER_NAME" -backend-config="resource_group_name=$TF_RESOURCE_GROUP_NAME" -backend-config="subscription_id=$TF_SUBSCRIPTION_ID"

    # Run Terraform apply if branch is main
    - name: Terraform Apply for Main branch
      if: ${{ fromJson(steps.pr-gate.outputs.result).proceed && github.ref == 'refs/heads/main' }}
      id: apply
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      run: terraform apply -auto-approve

    # Run formatting and validate if the branch is not main
    - name: Terraform Init for other branches
      id: init
      if: ${{ fromJson(steps.pr-gate.outputs.result).proceed && github.ref != 'refs/heads/main' }}
      run: terraform init -backend=false

    # Run a Terraform format
    - name: Terraform format for other branches
      if: ${{ fromJson(steps.pr-gate.outputs.result).proceed && github.ref != 'refs/heads/main' }}
      id: fmt
      run: terraform fmt -check

    # Run a Terraform validate
    - name: Terraform validate for other branches
      id: validate
      if: ${{ (success() || failure()) && fromJson(steps.pr-gate.outputs.result).proceed && github.ref != 'refs/heads/main' }}
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      run: terraform validate -no-color
